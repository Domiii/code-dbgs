diff --git a/src/algorithms/uncategorized/hanoi-tower/hanoiTower.js b/src/algorithms/uncategorized/hanoi-tower/hanoiTower.js
index 86d7888..20c9262 100644
--- a/src/algorithms/uncategorized/hanoi-tower/hanoiTower.js
+++ b/src/algorithms/uncategorized/hanoi-tower/hanoiTower.js
@@ -7,13 +7,14 @@ import Stack from '../../../data-structures/stack/Stack';
  * @param {Stack} toPole
  * @param {function(disc: number, fromPole: number[], toPole: number[])} moveCallback
  */
-function hanoiTowerRecursive({
-  numberOfDiscs,
-  fromPole,
-  withPole,
-  toPole,
-  moveCallback,
-}) {
+function hanoiTowerRecursive(tmp) {
+  const {
+    numberOfDiscs,
+    fromPole,
+    withPole,
+    toPole,
+    moveCallback,
+  } = tmp;
   if (numberOfDiscs === 1) {
     // Base case with just one disc.
     moveCallback(fromPole.peek(), fromPole.toArray(), toPole.toArray());
@@ -58,13 +59,14 @@ function hanoiTowerRecursive({
  * @param {Stack} [withPole]
  * @param {Stack} [toPole]
  */
-export default function hanoiTower({
-  numberOfDiscs,
-  moveCallback,
-  fromPole = new Stack(),
-  withPole = new Stack(),
-  toPole = new Stack(),
-}) {
+export default function hanoiTower(tmp) {
+  const {
+    numberOfDiscs,
+    moveCallback,
+    fromPole = new Stack(),
+    withPole = new Stack(),
+    toPole = new Stack(),
+  } = tmp;
   // Each of three poles of Tower of Hanoi puzzle is represented as a stack
   // that might contain elements (discs). Each disc is represented as a number.
   // Larger discs have bigger number equivalent.
@@ -81,4 +83,6 @@ export default function hanoiTower({
     toPole,
     moveCallback,
   });
+
+  return toPole;
 }
