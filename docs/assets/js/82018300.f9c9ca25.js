"use strict";(self.webpackChunkdbux_docs=self.webpackChunkdbux_docs||[]).push([[486],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,m=p["".concat(l,".").concat(c)]||p[c]||u[c]||o;return n?a.createElement(m,i(i({ref:t},g),{},{components:n})):a.createElement(m,i({ref:t},g))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2943:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return g},default:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l="Debugging",d={unversionedId:"background/debugging",id:"background/debugging",title:"Debugging",description:"Debugging, Debuggers and Dbux",source:"@site/content/background/02-debugging.mdx",sourceDirName:"background",slug:"/background/debugging",permalink:"/dbux/background/debugging",editUrl:"https://github.com/Domiii/dbux/blob/master/docs/content/background/02-debugging.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Background and Related Work",permalink:"/dbux/background/"},next:{title:"FAQ",permalink:"/dbux/faq"}},g=[{value:"Debugging, Debuggers and Dbux",id:"debugging-debuggers-and-dbux",children:[],level:2},{value:"On Omniscient Debuggers",id:"on-omniscient-debuggers",children:[],level:2}],u={toc:g};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"debugging"},"Debugging"),(0,o.kt)("h2",{id:"debugging-debuggers-and-dbux"},"Debugging, Debuggers and Dbux"),(0,o.kt)("p",null,"Debugging is an investigative process. When facing down most non-trivial bugs, we usually start by looking at available data (e.g. logs), guess potential places that might be at fault, rinse and repeat, in order to slowly circle in on the root-cause."),(0,o.kt)("p",null,"In order to do so, most developers still overwhelmingly resort to ",(0,o.kt)("a",{parentName:"p",href:"https://www.google.com/search?q=print+debugging"},"print debugging"),". Some developers sometimes",(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),' use the "traditional debugger": it allows placing breakpoints and step through the program in order to investigate highly localized data (such as variable values and the call-stack) at a specific place and time in the execution. It can be a fantastic tool, ',(0,o.kt)("strong",{parentName:"p"},"if")," you know where to look, and, ideally, ",(0,o.kt)("strong",{parentName:"p"},"if")," the root cause is downstream from observed symptoms. Sadly, most bugs don't work like that. Often times when we observe a failure, we have to go back in time to find its cause. Most implementations",(0,o.kt)("sup",{parentName:"p",id:"fnref-2"},(0,o.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))," of the traditional debugger do not support that.\nWe argue: this approach to debugging is not very effective, and has not really changed over the past several decades. That is why with Dbux, we sought out to look for new ways of approaching debugging."),(0,o.kt)("p",null,"Dbux is an ",(0,o.kt)("a",{parentName:"p",href:"https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=omniscient+debugger"},"omniscient debugger"),', meaning it automatically gathers and visualizes your application\'s runtime behavior, and makes it interactive. The term "omniscient" (meaning "',(0,o.kt)("strong",{parentName:"p"},"all-knowing"),"\") is a quirky exaggeration (it does not know your grandma's birthday). By default, it records the beginning and end of all executed files and functions, all asynchronous events and the entire trace log, meaning (almost) all statements and expressions and their values."),(0,o.kt)("p",null,"All that data is then available for the developer to inspect and interact with, using a variety of ",(0,o.kt)("a",{parentName:"p",href:"./features/"},"dynamic analysis tools"),". We decided that the diversity and depth of the tools available in the ",(0,o.kt)("a",{parentName:"p",href:"/dbux/tools-and-configuration/dbux-code"},"Dbux VSCode Extension")," might warrant the title of ",(0,o.kt)("strong",{parentName:"p"},"IDbE"),": Integrated Debugging Environment (not to be confused with ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Integrated_development_environment"},"IDE"),")."),(0,o.kt)("h2",{id:"on-omniscient-debuggers"},"On Omniscient Debuggers"),(0,o.kt)("p",null,"Back in 1997, in a heart-warming, informal call to arms, Henry Lieberman",(0,o.kt)("sup",{parentName:"p",id:"fnref-3"},(0,o.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")),' quotes skeptics saying: "Debugging is just plain hard" and "real programmers don\'t need debugging tools." Lieberman envisions a future where new innovative debugging tools (like his ZStep 95',(0,o.kt)("sup",{parentName:"p",id:"fnref-4"},(0,o.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4")),' omniscient LISP debugger) will surely become a staple of developer toolboxes around the world. 24 years later, the skeptics seem to have been proven right, and he wrong. While a lot of progress has been made in domain-specific debugging tools and automatic debugging research, general purpose code-level debuggers (or: the "traditional debugger") are still mostly the same as back then. We strongly agree with Lieberman that we are underutilizing the resources at our disposal. He argues, we should "use some of that speed and storage to process information that the programmer needs to understand what\'s going on in the program".'),(0,o.kt)("p",null,'In some places, that idea has been put into practice: coverage reporting, for example, has become standard industry practice. It uses some of that "speed and storage" to record code execution metrics in order to help developers with an important aspect of automated testing. Another area of improvement is the wide range of browser tools that especially frontend developers enjoy; examples include the DOM inspector, the trusty network tab and many domain-specific tools that caring framework developers put in our hands, such as the React and Redux Developer tools',(0,o.kt)("sup",{parentName:"p",id:"fnref-5"},(0,o.kt)("a",{parentName:"sup",href:"#fn-5",className:"footnote-ref"},"5")),"."),(0,o.kt)("p",null,'However, when it comes to general-purpose code-level analysis tools, little has changed over the past 30 years, which is rather odd. Imagine the manager of a large factory, running the factory based on observations from inputs and outputs, a "fax machine" and a "blueprint" alone. That is what is still happening in software development: debugging is still commonly performed by looking at what goes into and comes out of the blackbox that is the actual execution of our program, inspecting specialized logs (the "fax machine"), interleaved with reading and re-reading the code (the "blueprint"). To the Dbux team, this makes no sense. We are hoping that the 2020s shall finally be the time for the "next generation of debugging tools".'),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},(0,o.kt)("a",{parentName:"li",href:"https://www.google.com/search?q=developers+prefer+print+debugging&hl=en"},"Google: prefer print debugging"),".",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-2"},"A notable exception is ",(0,o.kt)("a",{parentName:"li",href:"https://www.replay.io/"},"replay.io")," which adds recording, backward-navigation as well as collaborative debugging to the traditional debugger.",(0,o.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-3"},'Lieberman, Henry. "The debugging scandal and what to do about it." Communications of the ACM 40.4 (1997): 26-30.',(0,o.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-4"},'Lieberman, Henry, and Christopher Fry. "ZStep 95: A reversible, animated source code stepper." (1997).',(0,o.kt)("a",{parentName:"li",href:"#fnref-4",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-5"},"Redux Developer Tools. ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zalmoxisus/redux-devtools-extension"},"https://github.com/zalmoxisus/redux-devtools-extension"),(0,o.kt)("a",{parentName:"li",href:"#fnref-5",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);